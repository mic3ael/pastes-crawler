@startuml Current Flow

!define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v14.0/dist
!include AWSPuml/AWSCommon.puml

' Uncomment the following line to create simplified view
' !include AWSPuml/AWSSimplified.puml

!include AWSPuml/General/Documents.puml
!include AWSPuml/Compute/Lambda.puml
!include AWSPuml/Database/DynamoDB.puml
!include AWSPuml/Database/MemoryDBforRedis.puml
!include AWSPuml/ApplicationIntegration/SimpleQueueService.puml
!include AWSPuml/Storage/SimpleStorageService.puml

left to right direction

Documents(pastes1, "Website 1", "pastes")
Lambda(pastes1Crawler, "Crawler", "crawl website 1")
Lambda(messageHandler, "Message Handler", "metadata")
DynamoDB(pastes1Db, "Website 1 table", "pastes metadata")
MemoryDBforRedis(pastes1Cache, "Redis", "avoid unnecessary update of the content")
SimpleStorageService(pastes1ContentStorage, "Website content storage", "S3", "source code")
SimpleQueueService(metadataQueue, "Metadata Queue", "")
SimpleQueueService(metadataQueueDLQ, "Metadata Queue DLQ", "")

pastes1 <-- pastes1Crawler: 1. crawl every 2 min
pastes1Crawler --> pastes1Cache: 2. check is already processed, if so return
pastes1Crawler --> pastes1ContentStorage: 3. store content(source)
pastes1Crawler --> metadataQueue: 4. send messages for further processing
pastes1Crawler --> pastes1Cache: 5. cache the new pastes [ttl: 1 day]
metadataQueue --> messageHandler: 6. consume
messageHandler --> pastes1Db: 7. store metadata
metadataQueue --> metadataQueueDLQ: after third retry
@enduml