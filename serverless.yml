service: crawlers-${sls:stage}
frameworkVersion: '~3'
useDotenv: true

plugins:
  - serverless-webpack
  - serverless-localstack

provider:
  name: aws
  runtime: nodejs16.x
  region: ${env:AWS_REGION}
  stackTags:
    Team: Crawler
custom:
  localstack:
    # debug: true
    stages:
      # list of stages for which the plugin should be enabled
      - local
    host: http://localstack # optional - LocalStack host to connect to
    edgePort: 4566 # optional - LocalStack edge port to connect to
    # lambda:
    #   # Enable this flag to improve performance
    #   mountCode: True
    networks:
      - localstack
functions:
  pastebinCrawler:
    handler: src/crawlers/pastebin/index.run
    timeout: 100 #sec
    memorySize: 256
    role: pastebinCrawlerManagedRole
    environment:
      AWS_REGION: ${env:AWS_REGION}
      URL: ${env:PASTEBIN_URL}
      QUEUE_URL: ${env:QUEUE_URL}
      APP_NAME: ${env:PASTEBIN_APP_NAME}
      BUCKET_NAME: ${env:PASTEBIN_BUCKET_NAME}
      AWS_ENDPOINT: ${env:AWS_ENDPOINT}
      CACHE_URL: ${env:CACHE_URL}
    name: pastebin-crawler-${sls:stage}
    events:
      # Invoke Lambda function every 2nd minute
      - schedule: cron(0/2 * ? * * *)
    tags:
      Team: Crawler
  messageConsumer:
    handler: src/consumers/crawler/index.run
    timeout: 30 #sec
    memorySize: 128
    name: message-consumer-${sls:stage}
    role: messageConsumerManagedRole
    environment:
      AWS_REGION: ${env:AWS_REGION}
      AWS_ENDPOINT: ${env:AWS_ENDPOINT}
      QUEUE_URL: ${env:QUEUE_URL}
    events:
      - sqs:
          arn: !GetAtt CollectorQueue.Arn
    tags:
      Team: Crawler
resources:
  Resources:
    ContentStorage:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:PASTEBIN_BUCKET_NAME}
    CollectorQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: collect-queue
        Tags:
          - Key: Team
            Value: Crawler
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt CollectorQueueDLQ.Arn
          maxReceiveCount: 3
    CollectorQueueDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: collect-queue-dlq
        MessageRetentionPeriod: 1209600,
        Tags:
          - Key: Team
            Value: Crawler
    PastebinTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:PASTEBIN_APP_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        Tags:
          - Key: Team
            Value: Crawler
        BillingMode: PAY_PER_REQUEST
    pastebinCrawlerManagedRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: pastebin-crawler-managed-role-${sls:stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: pastebin-crawler-managed-policy-${sls:stage}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: 'Allow'
                  Action:
                    - 's3:ListBucket'
                    - 's3:PutObject'
                    - 's3:PutObjectAcl'
                  Resource:
                    - arn:aws:s3:::${env:PASTEBIN_BUCKET_NAME}
                    - arn:aws:s3:::${env:PASTEBIN_BUCKET_NAME}/*
                - Effect: 'Allow'
                  Action:
                    - 'sqs:SendMessage'
                  Resource: !GetAtt CollectorQueue.Arn
    messageConsumerManagedRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: message-consumer-managed-role-${sls:stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: message-consumer-managed-policy-${sls:stage}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: 'Allow'
                  Action:
                    - 'sqs:DeleteMessage'
                    - 'sqs:ReceiveMessage'
                  Resource: !GetAtt CollectorQueue.Arn
                - Effect: 'Allow'
                  Action:
                    - 'dynamodb:BatchWriteItem'
                  Resource: !GetAtt CollectorQueue.Arn
